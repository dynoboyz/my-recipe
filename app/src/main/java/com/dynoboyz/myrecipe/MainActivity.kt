package com.dynoboyz.myrecipe

import android.content.Context
import android.content.Intent
import android.content.SharedPreferences
import android.graphics.BitmapFactory
import android.os.Bundle
import android.util.Base64
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.BaseAdapter
import android.widget.ImageView
import android.widget.ListView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.google.android.material.snackbar.Snackbar
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import com.jaredrummler.materialspinner.MaterialSpinner
import javax.xml.parsers.DocumentBuilderFactory


class MainActivity : AppCompatActivity() {
    private lateinit var myAdapter: CustomAdapter
    private lateinit var myListView: ListView
    private lateinit var persistRecipes: ArrayList<Recipe>
    private lateinit var currentRecipes: ArrayList<Recipe>
    private lateinit var defaultRecipes: ArrayList<Recipe>
    private lateinit var sharedPref: SharedPreferences

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // get spinner recipe types from recipetypes.xml
        val spinner = findViewById<MaterialSpinner>(R.id.mySpinner)
        val spinnerItem = mutableListOf("All")
        try {
            val inStream = assets.open("recipetypes.xml")
            val builderFactory = DocumentBuilderFactory.newInstance()
            val docBuilder = builderFactory.newDocumentBuilder()
            val doc = docBuilder.parse(inStream)
            val nList = doc.getElementsByTagName("recipetype")
            for (i in 0 until nList.length) {
                spinnerItem += nList.item(i).firstChild.nodeValue
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }

        spinner.setItems(spinnerItem)
        spinner.setOnItemSelectedListener { view, _, _, type ->
            Snackbar.make(
                view,
                "Change Recipe Type to $type",
                Snackbar.LENGTH_LONG
            ).show()

            val newRecipes = ArrayList<Recipe>()
            for (recipe in persistRecipes) {
                if (recipe.getType() == type || type == "All") {
                    newRecipes.add(recipe)
                }
            }
            currentRecipes.clear()
            currentRecipes.addAll(newRecipes)
            myAdapter.notifyDataSetChanged()
        }

        // add sample data
        var id = 0
        defaultRecipes = ArrayList()
        var recipe = Recipe(id++.toString(), "Breakfast","Applesauce French Toast", "", "","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")
        defaultRecipes.add(recipe)
        recipe = Recipe(id++.toString(), "Breakfast","Perfect Hard-Cooked Eggs", "", "", "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")
        defaultRecipes.add(recipe)
        recipe = Recipe(id++.toString(), "Breakfast","Corn Pancakes", "", "", "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")
        defaultRecipes.add(recipe)
        recipe = Recipe(id++.toString(), "Lunch","Fried Rice", "", "", "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")
        defaultRecipes.add(recipe)
        recipe = Recipe(id++.toString(), "Lunch","Pizza Boats", "", "", "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")
        defaultRecipes.add(recipe)
        recipe = Recipe(id++.toString(), "Dinner","Potato Nachos", "", "", "")
        defaultRecipes.add(recipe)

        // get data from persist storage else use default data
        sharedPref = this.getSharedPreferences(getString(R.string.app_storage), Context.MODE_PRIVATE)
        val gson = Gson()
        val json: String? = sharedPref.getString(getString(R.string.app_storage_key), gson.toJson(defaultRecipes))
        val collectionType = object : TypeToken<Collection<Recipe?>?>() {}.type
        persistRecipes = ArrayList()
        persistRecipes = gson.fromJson(json, collectionType)

        // save to persist storage when first load
        with (sharedPref.edit()) {
            putString(getString(R.string.app_storage_key), gson.toJson(persistRecipes))
            commit()
        }
        val newJson: String? = sharedPref.getString(getString(R.string.app_storage_key), null)

        // set current recipe
        currentRecipes = ArrayList()
        currentRecipes.addAll(persistRecipes)

        // list view recipe
        myListView = findViewById<ListView>(R.id.myListView)
        myAdapter = CustomAdapter(this, currentRecipes)
        myListView.adapter = myAdapter

        // handle add button
        val myAddBtn: View = findViewById(R.id.myAddBtn)
        myAddBtn.setOnClickListener {
            val intent = Intent(this, DetailActivity::class.java)
            intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
            intent.putExtra("id", "")
            startActivity(intent)
        }
    }

    override fun onResume() {
        super.onResume()
        // refresh each time load list
        sharedPref = this.getSharedPreferences(getString(R.string.app_storage), Context.MODE_PRIVATE)
        val gson = Gson()
        val json: String? = sharedPref.getString(getString(R.string.app_storage_key), gson.toJson(defaultRecipes))
        val collectionType = object : TypeToken<Collection<Recipe?>?>() {}.type
        persistRecipes = ArrayList()
        persistRecipes = gson.fromJson(json, collectionType)

        currentRecipes.clear()
        currentRecipes.addAll(persistRecipes)
        myAdapter.notifyDataSetChanged()
    }

    class Recipe(private var id:String, private var type:String, private var title: String, private var ingredients: String, private var steps: String, private var image: String) {
        fun getId(): String { return id  }
        fun getType(): String { return type  }
        fun getTitle(): String { return title }
        fun getIngredients(): String { return ingredients  }
        fun getSteps(): String { return steps  }
        fun getImage(): String { return image  }
    }

    class CustomAdapter(private var c: Context, private var recipes: ArrayList<Recipe>) : BaseAdapter() {
        override fun getCount(): Int   {  return recipes.size  }
        override fun getItem(i: Int): Any {  return recipes[i] }
        override fun getItemId(i: Int): Long { return i.toLong()}

        override fun getView(i: Int, view: View?, viewGroup: ViewGroup): View {
            var view = view
            if (view == null) {
                view = LayoutInflater.from(c).inflate(R.layout.listview_recipe, viewGroup, false)
            }

            // get current data
            val recipe = this.getItem(i) as Recipe

            val imgRecipe = view!!.findViewById<ImageView>(R.id.imgRecipe) as ImageView
            val txtTitle = view.findViewById<TextView>(R.id.txtTitle) as TextView
            val txtName = view.findViewById<TextView>(R.id.txtType) as TextView

            // map data to display
            txtTitle.text = recipe.getTitle()
            txtName.text = recipe.getType()
            val imageBytes = Base64.decode(recipe.getImage(), Base64.DEFAULT)
            val decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.size)
            imgRecipe.setImageBitmap(decodedImage)

            // handle item clicks for the ListView
            view.setOnClickListener {
                val intent = Intent(c, DetailActivity::class.java)
                intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
                intent.putExtra("id", recipe.getId())
                intent.putExtra("title", recipe.getTitle())
                intent.putExtra("type", recipe.getType())
                intent.putExtra("image", recipe.getImage())
                intent.putExtra("ingredients", recipe.getIngredients())
                intent.putExtra("steps", recipe.getSteps())
                c.startActivity(intent)
            }

            return view
        }
    }
}
